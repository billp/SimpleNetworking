//
//  TNRequest+ErrorHandling.swift
//  TermiNetwork
//
//  Created by Vasilis Panagiotopoulos on 29/4/20.
//  Copyright Â© 2020 Bill Panagiotopoulos. All rights reserved.
//

import UIKit

typealias TNDataTuple = (data: Data?, tnError: TNError?)

class TNRequestHelpers {
    /// Generates errors from generated by session task completion handler
    /// - Parameters:
    ///     - serverError: the error object from the completion handler
    /// - Returns:
    ///     - data: Data on success after middleware handler
    ///     - tnError: TNError on any generated error
    static func processData(with tnRequest: TNRequest,
                            data: Data?,
                            urlResponse: URLResponse?,
                            serverError: Error?) -> TNDataTuple {
        var customError: TNError?
        var data = data

        /// Error handling
        if let error = serverError {
            if (error as NSError).code == NSURLErrorCancelled {
                customError = TNError.cancelled(error)
            } else {
                customError = TNError.networkError(error)
            }
        } else if let response = urlResponse as? HTTPURLResponse {
            let statusCode = response.statusCode
            if response.statusCode / 100 != 2 {
                customError = TNError.notSuccess(statusCode)
            }
        }

        do {
            data = try tnRequest.handleMiddlewareBodyAfterReceiveIfNeeded(responseData: data)
        } catch {
            if let error = error as? TNError {
                customError = error
            }
        }

        return TNDataTuple(data: data, tnError: customError)
    }
}
